(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

/**
 *
 * MPlayer.js
 *
 * @version 0.6.0
 * @author bigggge
 *
 */

!function () {

  // template
  var audioHtml = '\n        <div class="player">\n            <div class="player-cover">\n                <img class="player-cover-img">\n            </div>\n\n            <div class="player-main">\n                <div class="player-info">\n                    <span class="player-title"></span>\n                    <span class="player-author"></span>\n                    <span class="player-loading">loading...</span>\n                </div>\n\n                <div class="player-controller">\n                    <span class="player-toggle icon-play2"></span>\n                    <span class="player-lrc"></span>\n                    <canvas class="player-spectrum" width="220" height="35"></canvas>\n                </div>\n\n                <div class="player-bottom-bar">\n                    <div class="time-bar">\n                        <div class="total-time-bar"><span class="played-time-bar"></span></div>\n                    </div>\n                    <span class="time-text">\n                <span class="played-time">00:00</span>/<span class="total-time">3:00</span>\n            </span>\n                    <span class="player-volume-icon icon-volume-medium"></span>\n                    <div class="player-volume-bar">\n                        <div class="total-volume-bar"><span class="current-volume-bar"></span></div>\n                    </div>\n                </div>\n            </div>\n            <div class="player-list">\n                <ol class="music-list"></ol>\n            </div>\n        </div>';

  // declare new audio context
  var audioCtx = new (window.AudioContext || window.webkitAudioContext)();
  var MEDIA_ELEMENT_NODES = new WeakMap();

  function MPlayer(options) {
    this.options = options;
    this.init();
  }

  MPlayer.prototype.init = function () {

    var options = this.options;
    this.el = document.getElementById(options.el);
    var autoPlay = options.autoplay;
    this.musicList = options.music;

    this.el.innerHTML = audioHtml;

    // DOM
    var el = this.el;
    this.toggleEl = el.querySelector('.player-toggle');
    this.lrcEl = el.querySelector('.player-lrc');
    this.spectrumEl = el.querySelector('.player-spectrum');
    this.titleEl = el.querySelector('.player-title');
    this.authorEl = el.querySelector('.player-author');
    this.loadingEl = el.querySelector('.player-loading');
    // time bar
    this.timeBarEl = el.querySelector('.time-bar');
    this.totalTimeEl = el.querySelector('.total-time');
    this.playedTimeEl = el.querySelector('.played-time');
    this.playerCoverEl = el.querySelector('.player-cover');
    this.playerCoverImgEl = el.querySelector('.player-cover-img');
    this.persentPlayedEl = el.querySelector('.played-time-bar');
    // volume
    this.playerVolumeEl = el.querySelector('.player-volume-icon');
    this.volumeBarEl = el.querySelector('.player-volume-bar');
    this.totalVolumeEl = el.querySelector('.total-volume-bar');
    this.currentVolumeEl = el.querySelector('.current-volume-bar');
    // music list
    this.playerListEl = el.querySelector('.player-list');
    this.musicListEl = el.querySelector('.music-list');
    /**
     * 为何不使用 querySelectorAll? 因为 document.querySelectorAll 返回一个静态的 NodeList
     *
     * https://www.zhihu.com/question/31576889
     * https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList
     * https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCollection
     */
    // this.musicItemEls = el.querySelectorAll('.music-item');
    this.musicItemEls = el.getElementsByClassName('music-item');

    if (!Array.isArray(this.musicList) || this.musicList.length === 0) {
      this.loadingEl.classList.add('error');
      this.loadingEl.innerHTML = '参数错误 T^T';
      return;
    }

    this.currentMusic = this.musicList[0];

    // generate music list
    var html = '';
    for (var i = 0; i < this.musicList.length; i++) {
      html += '<li class="music-item">' + this.musicList[i].title + ' <span class="music-author">' + this.musicList[i].author + '</span></li>';
    }
    this.musicListEl.innerHTML = html;
    this.musicItemEls[0].className = 'music-item active';

    // set music
    this.audio = document.createElement('audio');
    this.setMusic(false);
    this.audio.crossOrigin = 'anonymous';

    // lrc or spectrum
    this.currentMusic.lrc ? this.parseLrc(this.currentMusic.lrc) : this.initSpectrum();

    // add event listener
    this._addEventListener();

    // auto play
    autoPlay && this.toggle();
  };

  /**
   * play or pause
   */
  MPlayer.prototype.toggle = function (forcePlay) {
    if (forcePlay || this.audio.paused) {
      this.audio.play();
      this.toggleEl.className = 'player-toggle icon-pause';
      this.currentVolumeEl.style.height = this.audio.volume * 100 + '%';
    } else {
      this.audio.pause();
      this.toggleEl.className = 'player-toggle icon-play2';
    }
  };

  /**
   * set music
   */
  MPlayer.prototype.setMusic = function (forcePlay) {
    this.loadingEl.innerHTML = 'loading...';
    // // lrc or spectrum
    // this.currentMusic.lrc ? this.parseLrc(this.currentMusic.lrc) : this.initSpectrum();
    // song
    this.audio.src = this.currentMusic.src;
    // song cover
    this.playerCoverImgEl.src = this.currentMusic.cover;
    // song title
    this.titleEl.innerHTML = this.currentMusic.title;
    // song author
    this.authorEl.innerHTML = this.currentMusic.author;
    forcePlay && this.toggle(forcePlay);
  };

  MPlayer.prototype._addEventListener = function () {
    var _this = this;

    // play or pause
    this.toggleEl.addEventListener('click', function () {
      _this.toggle();
    });

    // total time
    this.audio.addEventListener('durationchange', function () {
      _this.totalTimeEl.innerHTML = _secondToTime(_this.audio.duration);
    });

    // can play
    this.audio.addEventListener('canplaythrough', function () {
      _this.loadingEl.innerHTML = '';
      _this.currentMusic.lrc ? _this.parseLrc(_this.currentMusic.lrc) : _this.initSpectrum();
    });

    this.audio.addEventListener('playing', function () {
      _this.loadingEl.innerHTML = '';
      _this.playerCoverEl.style.animationPlayState = 'running';
    });

    this.audio.addEventListener('pause', function () {
      _this.loadingEl.innerHTML = '';
      _this.playerCoverEl.style.animationPlayState = 'paused';
    });

    // music end
    this.audio.addEventListener('ended', function () {
      _this.toggleEl.className = 'player-toggle icon-play2';
    });

    // time update
    this.audio.addEventListener('timeupdate', function () {
      _this.playedTimeEl.innerHTML = _secondToTime(_this.audio.currentTime);
      _this.persentPlayedEl.style.width = _this.audio.currentTime / _this.audio.duration * 100 + '%';
      _this.lrcEl.innerHTML = getCurrentLrc(_this.currentLrc, _this.audio.currentTime);
    });

    // error listener
    this.audio.addEventListener('error', function () {
      _this.loadingEl.classList.add('error');
      _this.loadingEl.innerHTML = '加载失败 T^T';
      _this.playerCoverEl.style.animationPlayState = 'paused';
    });

    // progress bar
    this.timeBarEl.addEventListener('click', function (e) {
      var event = e || window.event;
      var timeBarWidth = _this.timeBarEl.clientWidth;
      var rect = _this.timeBarEl.getBoundingClientRect();
      var viewLeft = rect.left;
      var percentage = ((event.clientX - viewLeft) / timeBarWidth).toFixed(2);

      _this.persentPlayedEl.style.width = percentage * 100 + '%';
      _this.audio.currentTime = percentage * _this.audio.duration;
      _this.playedTimeEl.innerHTML = _secondToTime(_this.audio.currentTime);
    });

    // volume
    this.playerVolumeEl.addEventListener('click', function (e) {
      if (_this.audio.muted) {
        _this.audio.muted = false;
        _this.playerVolumeEl.className = 'player-volume-icon icon-volume-medium';
        _this.currentVolumeEl.style.height = '100%';
      } else {
        _this.audio.muted = true;
        _this.playerVolumeEl.className = 'player-volume-icon icon-volume-mute2';
        _this.currentVolumeEl.style.height = '0%';
      }
    });

    this.volumeBarEl.addEventListener('click', function (e) {
      var event = e || window.event;
      var volumeBarHeight = _this.volumeBarEl.clientHeight;
      var rect = _this.volumeBarEl.getBoundingClientRect();
      var viewTop = rect.top;
      var percentage = 1 - ((event.clientY - viewTop) / volumeBarHeight).toFixed(2);

      _this.currentVolumeEl.style.height = percentage * 100 + '%';
      _this.audio.volume = percentage;
    });

    // show or hide music list
    this.playerCoverEl.addEventListener('click', function () {
      _this.playerListEl.style.display = _this.playerListEl.style.display === 'block' ? 'none' : 'block';
    });

    // music list
    this.musicListEl.addEventListener('click', function (e) {
      for (var i = 0; i < _this.musicItemEls.length; i++) {
        _this.musicItemEls[i].classList.remove('active');
      }
      if (e.target && e.target.nodeName === 'LI') {
        var node = e.target;
        var index = [].indexOf.call(node.parentNode.children, node);
        _this.currentMusic = _this.musicList[index];
        node.className = 'music-item active';

        _this.setMusic(true);
      }
    });
  };

  MPlayer.prototype.parseLrc = function (lrc) {
    var _this2 = this;

    this.spectrumEl.style.display = 'none';
    this.lrcEl.style.display = '';

    if (!lrc) {
      this.currentLrc = [[0, '']];
    }
    // if lrc is url and need to download
    else if (lrc.indexOf('http') === 0) {
        if (window.fetch) {
          console.log('fetch...');
          fetch(lrc).then(function (response) {
            return response.text();
          }).then(function (text) {
            _this2.currentLrc = getParsedLrcArr(text);
          }).catch(function (err) {
            console.error(err);
          });
        } else {
          var request = new XMLHttpRequest();
          request.open('GET', lrc, true);

          request.onload = function () {
            if (request.status >= 200 && request.status < 400) {
              var text = request.responseText;
              _this2.currentLrc = getParsedLrcArr(text);
            }
          };
          request.onerror = function (err) {
            console.log(err);
          };
          request.send();
        }
      }
      // if lrc is text
      else {
          this.currentLrc = getParsedLrcArr(lrc);
        }
  };

  // TODO
  /**
   * init spectrum
   */
  MPlayer.prototype.initSpectrum = function () {
    this.currentLrc = null;
    this.spectrumEl.style.display = '';
    this.lrcEl.style.display = 'none';

    var canvas = this.spectrumEl;
    // 创建一个MediaElementAudioSourceNode接口来关联HTMLMediaElement.
    // 这可以用来播放和处理来自<video>或<audio> 元素的音频.
    var source = void 0;
    // use WeakMap to avoid
    // 'HTMLMediaElement already connected previously to a different MediaElementSourceNode.' issue.
    if (MEDIA_ELEMENT_NODES.has(this.audio)) {
      source = MEDIA_ELEMENT_NODES.get(this.audio);
    } else {
      source = audioCtx.createMediaElementSource(this.audio);
      MEDIA_ELEMENT_NODES.set(this.audio, source);
    }
    // source = audioCtx.createMediaElementSource(this.audio)
    // 创建一个AnalyserNode，它可以用来显示音频时间和频率的数据
    var analyser = audioCtx.createAnalyser();
    // 连接：source → analyser → destination
    source.connect(analyser);
    analyser.connect(audioCtx.destination);

    var canvasWidth = canvas.width,
        canvasHeight = canvas.height;
    var canvasCtx = canvas.getContext('2d');
    // 存储数据，analyser.frequencyBinCount === 1024
    var arr = new Uint8Array(analyser.frequencyBinCount);
    var count = arr.length,
        // 能量柱个数
    lineWidth = canvasCtx.lineWidth = canvasWidth / count; // 能量柱宽度
    var drawX = 0,
        // 能量柱X轴坐标
    drawY = 0; // 能量柱Y轴坐标

    (function render(e) {
      analyser.getByteFrequencyData(arr);

      canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);
      for (var i = 0; i < count; i++) {
        drawX = i * lineWidth;
        drawY = parseInt(canvasHeight - arr[i] * 0.1);
        canvasCtx.beginPath();
        canvasCtx.strokeStyle = 'pink';
        canvasCtx.moveTo(drawX, canvasHeight);
        canvasCtx.lineTo(drawX, drawY);
        canvasCtx.stroke();
      }
      requestAnimationFrame(render);
    })();
  };

  /**
   * second to 00:00
   *
   * @param second
   * @return {string}
   */
  function _secondToTime(second) {
    var min = parseInt(second / 60);
    var sec = parseInt(second % 60);
    var add0min = min < 10 ? '0' + min : min;
    var add0sec = sec < 10 ? '0' + sec : sec;
    return add0min + ':' + add0sec;
  }

  /**
   * parse lrc
   * @refer https://github.com/DIYgod/APlayer/blob/master/src/APlayer.js#L621-L644
   */
  function getParsedLrcArr(text) {
    var lyric = text.split('\n');
    if (lyric.length === 1) {
      lyric = text.split(' ');
    }
    var lrc = [];
    for (var i = 0, lyricLen = lyric.length; i < lyricLen; i++) {
      // match lrc time
      var lrcTimes = lyric[i].match(/\[(\d{2}):(\d{2})\.(\d{2,3})]/g);
      // match lrc text
      var lrcText = lyric[i].replace(/\[(\d{2}):(\d{2})\.(\d{2,3})]/g, '').replace(/^\s+|\s+$/g, '');
      if (lrcTimes !== null) {
        // handle multiple time tag
        var timeLen = lrcTimes.length;
        for (var j = 0; j < timeLen; j++) {
          var oneTime = /\[(\d{2}):(\d{2})\.(\d{2,3})]/.exec(lrcTimes[j]);
          var lrcTime = oneTime[1] * 60 + parseInt(oneTime[2]) + parseInt(oneTime[3]) / ((oneTime[3] + '').length === 2 ? 100 : 1000);
          lrc.push([lrcTime, lrcText]);
        }
      }
    }
    // sort by time
    lrc.sort(function (a, b) {
      return a[0] - b[0];
    });
    return lrc;
  }

  function getCurrentLrc(lrc, time) {
    if (!lrc) return '';
    if (time < lrc[0][0]) return lrc[0][1];
    var i = 0;
    for (var l = lrc.length; i < l; i++) {
      if (time >= lrc[i][0] && (!lrc[i + 1] || time <= lrc[i + 1][0])) {
        break;
      }
    }
    return lrc[i][1];
  }

  window.MPlayer = MPlayer;
}();

},{}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
